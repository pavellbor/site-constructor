{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://site-constructor/./src/const.js","webpack://site-constructor/./src/utils/render.js","webpack://site-constructor/./src/view/abstract-view.js","webpack://site-constructor/./src/view/layout-view.js","webpack://site-constructor/./src/view/section-view.js","webpack://site-constructor/./src/view/element-view.js","webpack://site-constructor/./src/presenter/element-presenter.js","webpack://site-constructor/./src/presenter/section-presenter.js","webpack://site-constructor/./src/presenter/layout-presenter.js","webpack://site-constructor/./src/view/grid-select-view.js","webpack://site-constructor/./src/model/abstract-model.js","webpack://site-constructor/./src/main.js","webpack://site-constructor/./src/model/grid-model.js","webpack://site-constructor/./src/model/elements-model.js","webpack://site-constructor/./src/utils/common.js","webpack://site-constructor/./src/presenter/grid-select-presenter.js"],"sourcesContent":["export const RenderPosition = {\r\n  BEFOREBEGIN: 'beforebegin',\r\n  AFTERBEGIN: 'afterbegin',\r\n  BEFOREEND: 'beforeend',\r\n  AFTEREND: 'afterend',\r\n};\r\n\r\nexport const GridType = {\r\n  LANDING: 'landing',\r\n  BLOG: 'blog',\r\n  SHOP: 'shop',\r\n};\r\n\r\nexport const SectionType = {\r\n  HEADER: 'header',\r\n  CONTENT: 'content',\r\n  FOOTER: 'footer',\r\n};\r\n\r\nexport const TagName = {\r\n  H1: 'h1',\r\n  H2: 'h2',\r\n  H3: 'h3',\r\n  P: 'p',\r\n  IMG: 'img',\r\n};\r\n\r\nexport const UserAction = {\r\n  ADD_ELEMENT: 'addElement',\r\n  DELETE_ELEMENT: 'deleteElement',\r\n  UPDATE_ELEMENT: 'updateElement',\r\n};\r\n\r\nexport const UpdateType = {\r\n  PATCH: 'patch',\r\n  MINOR: 'minor',\r\n  MAJOR: 'major',\r\n};\r\n","import { RenderPosition } from \"../const.js\";\r\nimport AbstractView from \"../view/abstract-view.js\";\r\n\r\nexport const render = (container, element, position) => {\r\n  let parentElement = (container instanceof AbstractView) ? container.element : container;\r\n  let childElement = (element instanceof AbstractView) ? element.element : element;\r\n\r\n  switch (position) {\r\n    case RenderPosition.BEFOREBEGIN:\r\n      parentElement.before(childElement);\r\n      break;\r\n    case RenderPosition.AFTERBEGIN:\r\n      parentElement.prepend(childElement);\r\n      break;\r\n    case RenderPosition.BEFOREEND:\r\n      parentElement.append(childElement);\r\n      break;\r\n    case RenderPosition.AFTEREND:\r\n      parentElement.after(childElement);\r\n      break;\r\n  }\r\n};\r\n\r\nexport const createElement = (template) => {\r\n  const newElement = document.createElement('div');\r\n\r\n  newElement.innerHTML = template;\r\n\r\n  return newElement.firstElementChild;\r\n};\r\n\r\nexport const remove = (component) => {\r\n  component.element.remove();\r\n  component.removeElement();\r\n};\r\n\r\nexport const replace = (oldComponent, newComponent) => {\r\n  oldComponent.element.replaceWith(newComponent.element);\r\n};\r\n","import { createElement } from \"../utils/render.js\";\r\n\r\nexport default class AbstractView {\r\n  #element = null;\r\n  _callback = [];\r\n\r\n  constructor() {\r\n    if (new.target === AbstractView) {\r\n      throw new Error('Can\\'t instantiate AbstractView');\r\n    }\r\n  }\r\n\r\n  get element() {\r\n    if (!this.#element) {\r\n      this.#element = createElement(this.template);\r\n    }\r\n\r\n    return this.#element;\r\n  }\r\n\r\n  get template() {\r\n    throw new Error('Method is not emplemented');\r\n  }\r\n\r\n  removeElement() {\r\n    this.#element = null;\r\n  }\r\n}","import AbstractView from \"./abstract-view.js\";\r\n\r\nexport const createLayoutTemplate = (grid) => `<div class=\"layout layout--${grid}\"></div>`;\r\n\r\nexport default class LayoutView extends AbstractView {\r\n  #grid = null;\r\n\r\n  constructor(grid) {\r\n    super();\r\n    this.#grid = grid;\r\n  }\r\n\r\n  get template() {\r\n    return createLayoutTemplate(this.#grid);\r\n  }\r\n}","import AbstractView from \"./abstract-view.js\";\r\nimport { TagName } from \"../const.js\";\r\n\r\nconst createSectionTemplate = (sectionType, sectionNumber, hasContent) => {\r\n  const sectionNumberClassName = sectionNumber ? sectionType + '-' + sectionNumber : '';\r\n  const sectionEmptyClassName = !hasContent ? sectionType + '--empty' : '';\r\n  const sectionPlaceholder = !hasContent ? `<p class=\"placeholder\">${sectionType[0].toUpperCase() + sectionType.slice(1)}</p>` : '';\r\n\r\n  return `<div class=\"${sectionType} ${sectionNumberClassName} ${sectionEmptyClassName}\">\r\n      ${sectionPlaceholder}\r\n      <button type=\"button\" class=\"add-btn\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\">\r\n          <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 20C0 8.96 8.96 0 20 0C31.04 0 40 8.96 40 20C40 31.04 31.04 40 20 40C8.96 40 0 31.04 0 20ZM22 22H30V18H22V9.99999H18V18H10V22H18V30H22V22Z\" fill=\"#80CCF0\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div class=\"choose-elem choose-elem--hide\">\r\n        <button type=\"button\" class=\"choose-elem__btn\" data-elem-type=\"${TagName.H1}\">Заголовок H1</button>\r\n        <button type=\"button\" class=\"choose-elem__btn\" data-elem-type=\"${TagName.H2}\">Заголовок H2</button>\r\n        <button type=\"button\" class=\"choose-elem__btn\" data-elem-type=\"${TagName.H3}\">Заголовок H3</button>\r\n        <button type=\"button\" class=\"choose-elem__btn\" data-elem-type=\"${TagName.P}\">Абзац текста</button>\r\n        <button type=\"button\" class=\"choose-elem__btn\" data-elem-type=\"${TagName.IMG}\">Изображение</button>\r\n      </div>\r\n\r\n    </div>`;\r\n};\r\n\r\nexport default class SectionView extends AbstractView {\r\n  #sectionType = null;\r\n  #sectionNumber = null;\r\n  #hasContent = null;\r\n\r\n  constructor(sectionType, sectionNumber, hasContent) {\r\n    super();\r\n    this.#sectionType = sectionType;\r\n    this.#sectionNumber = sectionNumber;\r\n    this.#hasContent = hasContent;\r\n  }\r\n\r\n  get template() {\r\n    return createSectionTemplate(this.#sectionType, this.#sectionNumber, this.#hasContent);\r\n  }\r\n\r\n  toggleChooseElementPanel = () => {\r\n    this.element.querySelector('.choose-elem').classList.toggle('choose-elem--hide');\r\n  };\r\n\r\n  setAddElementClickHandler = (callback) => {\r\n    this._callback.addElementClick = callback;\r\n\r\n    this.element.querySelector('.add-btn').addEventListener('click', this.#addElementClickHandler);\r\n  };\r\n\r\n  setChooseElementPanelClickHandler = (callback) => {\r\n    this._callback.chooseElementPanelClick = callback;\r\n\r\n    this.element.querySelector('.choose-elem').addEventListener('click', this.#chooseElementPanelClickHandler);\r\n  };\r\n\r\n\r\n  #addElementClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    this._callback.addElementClick();\r\n  };\r\n\r\n  #chooseElementPanelClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    this._callback.chooseElementPanelClick(evt.target.dataset.elemType);\r\n  };\r\n}\r\n","import { TagName } from \"../const.js\";\r\nimport AbstractView from \"./abstract-view.js\";\r\n\r\nconst tagNameToPlaceholder = {\r\n  [TagName.H1]: 'Заголовок 1',\r\n  [TagName.H2]: 'Заголовок 2',\r\n  [TagName.H3]: 'Заголовок 3',\r\n  [TagName.P]: 'Абзац текста'\r\n};\r\n\r\nconst getElementClassName = (element, content) => {\r\n  let elementClassName = null;\r\n\r\n  switch (element) {\r\n    case TagName.IMG:\r\n      elementClassName = content ? 'element--uploaded image' : `element--image image`;\r\n      break;\r\n    case TagName.P:\r\n      elementClassName = 'text';\r\n      break;\r\n    default:\r\n      elementClassName = 'title';\r\n  }\r\n\r\n  return elementClassName;\r\n};\r\n\r\nconst createImageContentTemplate = (content) => {\r\n  const imageTemplate = content ? `<img src=\"${content}\">` : '';\r\n\r\n  return `<button type=\"button\" class=\"add-img-btn\">\r\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6 2V8H0V12H6V18H10V12H16V8H10V2H6ZM12 14V20H6V40C6 42.2 7.8 44 10 44H42C44.2 44 46 42.2 46 40V16C46 13.8 44.2 12 42 12H35.66L32 8H18V14H12ZM26 38C31.52 38 36 33.52 36 28C36 22.48 31.52 18 26 18C20.48 18 16 22.48 16 28C16 33.52 20.48 38 26 38ZM26 34C22.68 34 20 31.32 20 28C20 24.68 22.68 22 26 22C29.32 22 32 24.68 32 28C32 31.32 29.32 34 26 34Z\" />\r\n      </svg>\r\n    </button>\r\n    <div class=\"img-upload\">\r\n      <p>Загрузите изображение</p>\r\n      <input type=\"url\" placeholder=\"Вставьте ссылку на изображение\">\r\n      <label class=\"img-upload__label\">Загрузить\r\n        <input class=\"visually-hidden\" type=\"file\" accept=\"image/png, image/jpeg\">\r\n      </label>\r\n    </div>\r\n    ${imageTemplate}`;\r\n};\r\n\r\nconst createTextContentTemplate = (element, content) => {\r\n  const elementContent = content || '';\r\n\r\n  return `<${element} contenteditable=\"true\" data-placeholder=\"${tagNameToPlaceholder[element]}\">${elementContent}</${element}>`;\r\n};\r\n\r\nconst createElementTemplate = (element) => {\r\n  const { id, element: tagName, content } = element;\r\n  const elementClassName = getElementClassName(tagName, content);\r\n  const contentTemplate = (tagName === TagName.IMG) ? createImageContentTemplate(content) : createTextContentTemplate(tagName, content);\r\n\r\n  return `<div class=\"element ${elementClassName}\" tabindex=\"0\" data-element-id=${id}>\r\n      ${contentTemplate}\r\n      <button type=\"button\" class=\"delete-btn\">\r\n        <span class=\"visually-hidden\">Удалить элемент</span>\r\n      </button>\r\n    </div>`;\r\n};\r\n\r\nexport default class ElementView extends AbstractView {\r\n  #element = null;\r\n\r\n  constructor(element) {\r\n    super();\r\n    this.#element = element;\r\n  }\r\n\r\n  get template() {\r\n    return createElementTemplate(this.#element);\r\n  }\r\n\r\n  setDeleteElementClickHandler = (callback) => {\r\n    this._callback.deleteElementClick = callback;\r\n\r\n    this.element.querySelector('.delete-btn').addEventListener('click', this.#deleteElementClickHandler);\r\n  };\r\n\r\n  setChangeTextElementHandler = (callback) => {\r\n    this._callback.changeTextElement = callback;\r\n\r\n    this.element.querySelector('[contenteditable=true]').addEventListener('keydown', this.#onTextElementEnterKeyDown);\r\n    this.element.querySelector('[contenteditable=true]').addEventListener('blur', this.#onTextElementBlur);\r\n  };\r\n\r\n  setAddImageClickHandler = (callback) => {\r\n    this._callback.addImageClick = callback;\r\n\r\n    this.element.querySelector('.add-img-btn').addEventListener('click', this.#addImageClickHandler);\r\n  };\r\n\r\n  setImageUploadClickHandler = (callback) => {\r\n    this._callback.imageUploadClick = callback;\r\n\r\n    this.element.querySelector('.img-upload__label').addEventListener('click', this.#imageUploadClickHandler);\r\n  };\r\n\r\n  showImageUploadPopup = () => {\r\n    this.element.classList.add('element--uploading');\r\n  };\r\n\r\n  hideImageUploadPopup = () => {\r\n    this.element.classList.remove('element--uploading');\r\n  };\r\n\r\n  #deleteElementClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    this._callback.deleteElementClick();\r\n  };\r\n\r\n  #onTextElementEnterKeyDown = (evt) => {\r\n    if (evt.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    this._callback.changeTextElement(evt.target.textContent);\r\n  };\r\n\r\n  #onTextElementBlur = (evt) => {\r\n    this._callback.changeTextElement(evt.target.textContent);\r\n  };\r\n\r\n  #addImageClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    this._callback.addImageClick();\r\n  };\r\n\r\n  #imageUploadClickHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    this._callback.imageUploadClick(this.element.querySelector('[type=url]').value);\r\n  };\r\n}\r\n","import { RenderPosition, TagName, UserAction } from \"../const.js\";\r\nimport { render, replace } from \"../utils/render.js\";\r\nimport ElementView from \"../view/element-view.js\";\r\n\r\nexport default class ElementPresenter {\r\n  #elementContainer = null;\r\n  #elementComponent = null;\r\n  #changeData = null;\r\n  #element = null;\r\n\r\n\r\n  constructor(elementContainer, changeData) {\r\n    this.#elementContainer = elementContainer;\r\n    this.#changeData = changeData;\r\n  }\r\n\r\n  init = (element) => {\r\n    const prevElementComponent = this.#elementComponent;\r\n    this.#element = element;\r\n    this.#elementComponent = new ElementView(element);\r\n\r\n    this.#setEventHandlers();\r\n\r\n    if (prevElementComponent !== null) {\r\n      replace(prevElementComponent, this.#elementComponent);\r\n      return;\r\n    }\r\n\r\n    this.#render();\r\n  };\r\n\r\n  #render = () => {\r\n    render(this.#elementContainer, this.#elementComponent, RenderPosition.BEFOREEND);\r\n  };\r\n\r\n  #setEventHandlers = () => {\r\n    if (this.#element.element === TagName.IMG) {\r\n      this.#elementComponent.setAddImageClickHandler(this.#handleAddImageClick);\r\n      this.#elementComponent.setImageUploadClickHandler(this.#handleImageUploadClick);\r\n    } else {\r\n      this.#elementComponent.setChangeTextElementHandler(this.#handleChangeTextElement);\r\n    }\r\n\r\n    this.#elementComponent.setDeleteElementClickHandler(this.#handleDeleteElementClick);\r\n  };\r\n\r\n  #handleDeleteElementClick = () => {\r\n    this.#changeData(UserAction.DELETE_ELEMENT, { id: this.#element.id });\r\n  };\r\n\r\n  #handleChangeTextElement = (content) => {\r\n    this.#changeData(UserAction.UPDATE_ELEMENT, { id: this.#element.id, content });\r\n  };\r\n\r\n  #handleAddImageClick = () => {\r\n    this.#elementComponent.showImageUploadPopup();\r\n    document.addEventListener('click', this.#onImageUploadPopupOutsideClick);\r\n  };\r\n\r\n  #handleImageUploadClick = (content) => {\r\n    this.#changeData(UserAction.UPDATE_ELEMENT, { id: this.#element.id, content });\r\n  };\r\n\r\n  #onImageUploadPopupOutsideClick = (evt) => {\r\n    if (this.#elementComponent.element.contains(evt.target)) {\r\n      return;\r\n    }\r\n\r\n    this.#elementComponent.hideImageUploadPopup();\r\n    document.removeEventListener('click', this.#onImageUploadPopupOutsideClick);\r\n  };\r\n}\r\n","import { RenderPosition, UserAction } from \"../const.js\";\r\nimport { render } from \"../utils/render.js\";\r\nimport SectionView from \"../view/section-view.js\";\r\nimport ElementPresenter from \"./element-presenter.js\";\r\n\r\nexport default class SectionPresenter {\r\n  #sectionContainer = null;\r\n  #sectionComponent = null;\r\n  #section = null;\r\n  #changeData = null;\r\n  #elements = null;\r\n  #elementsPresenters = new Map();\r\n\r\n\r\n  constructor(sectionContainer, section, changeData) {\r\n    this.#sectionContainer = sectionContainer;\r\n    this.#section = section;\r\n    this.#changeData = changeData;\r\n  }\r\n\r\n  init = (elements) => {\r\n    const { type, number } = this.#section;\r\n    this.#elements = elements;\r\n    this.#sectionComponent = new SectionView(type, number, !!elements.length);\r\n\r\n    this.#render();\r\n    this.#setEventHandlers();\r\n  };\r\n\r\n  updateElement = (element) => {\r\n    this.#elementsPresenters.get(element.id).init(element);\r\n  };\r\n\r\n  #render = () => {\r\n    this.#renderElements();\r\n    this.#renderSection();\r\n  };\r\n\r\n  #renderElements = () => {\r\n    this.#elements.forEach(this.#renderElement);\r\n  };\r\n\r\n  #renderElement = (element) => {\r\n    const elementPresenter = new ElementPresenter(this.#sectionComponent, this.#changeData);\r\n\r\n    this.#elementsPresenters.set(element.id, elementPresenter);\r\n    elementPresenter.init(element);\r\n  };\r\n\r\n  #renderSection = () => {\r\n    render(this.#sectionContainer, this.#sectionComponent, RenderPosition.BEFOREEND);\r\n  };\r\n\r\n  #setEventHandlers = () => {\r\n    this.#sectionComponent.setAddElementClickHandler(this.#handleAddElementClick);\r\n    this.#sectionComponent.setChooseElementPanelClickHandler(this.#handleChooseElementPanelClick);\r\n  };\r\n\r\n  #handleAddElementClick = () => {\r\n    this.#sectionComponent.toggleChooseElementPanel();\r\n  };\r\n\r\n  #handleChooseElementPanelClick = (element) => {\r\n    this.#changeData(UserAction.ADD_ELEMENT, { sectionId: this.#section.id, element, content: null });\r\n  };\r\n}\r\n","import LayoutView from \"../view/layout-view.js\";\r\nimport { remove, render } from \"../utils/render.js\";\r\nimport { GridType, RenderPosition, SectionType, UpdateType, UserAction } from \"../const.js\";\r\nimport SectionPresenter from \"./section-presenter.js\";\r\n\r\nconst gridTypeToColumnMap = {\r\n  [GridType.LANDING]: 1,\r\n  [GridType.BLOG]: 2,\r\n  [GridType.SHOP]: 3,\r\n};\r\n\r\nexport default class LayoutPresenter {\r\n  #layoutContainer = null;\r\n  #gridModel = null;\r\n  #elementsModel = null;\r\n  #layoutComponent = null;\r\n  #sectionPresenters = new Map();\r\n\r\n  constructor(layoutContainer, gridModel, elementsModel) {\r\n    this.#layoutContainer = layoutContainer;\r\n    this.#gridModel = gridModel;\r\n    this.#elementsModel = elementsModel;\r\n  }\r\n\r\n  get grid() {\r\n    return this.#gridModel.grid;\r\n  }\r\n\r\n  get sections() {\r\n    const sections = [];\r\n\r\n    sections.push(SectionType.HEADER);\r\n\r\n    for (let i = 0; i < gridTypeToColumnMap[this.grid]; i++) {\r\n      sections.push(SectionType.CONTENT);\r\n    }\r\n\r\n    sections.push(SectionType.FOOTER);\r\n    return sections;\r\n  }\r\n\r\n  get elements() {\r\n    return [...this.#elementsModel.elements];\r\n  }\r\n\r\n  init = () => {\r\n    const prevLayoutComponent = this.#layoutComponent;\r\n    this.#layoutComponent = new LayoutView(this.grid);\r\n\r\n    if (prevLayoutComponent !== null) {\r\n      remove(prevLayoutComponent);\r\n    }\r\n\r\n    this.#render();\r\n    this.#gridModel.addObserver(this.#handleModelEvent);\r\n    this.#elementsModel.addObserver(this.#handleModelEvent);\r\n  };\r\n\r\n  #render = () => {\r\n    this.#renderSections();\r\n    this.#renderLayout();\r\n  };\r\n\r\n  #renderLayout = () => {\r\n    render(this.#layoutContainer, this.#layoutComponent, RenderPosition.BEFOREEND);\r\n  };\r\n\r\n  #renderSections = () => {\r\n    this.sections.forEach(this.#renderSection);\r\n  };\r\n\r\n  #renderSection = (type, index) => {\r\n    const number = type === SectionType.CONTENT ? index : null;\r\n    const sectionPresenter = new SectionPresenter(this.#layoutComponent, { id: index, type, number }, this.#handleViewAction);\r\n    const sectionElements = this.elements.filter(element => element.sectionId === index);\r\n\r\n    sectionPresenter.init(sectionElements);\r\n    this.#sectionPresenters.set(index, sectionPresenter);\r\n  };\r\n\r\n  #handleModelEvent = (updateType, data) => {\r\n    if (updateType === UpdateType.PATCH) {\r\n      this.#sectionPresenters.get(data.sectionId).updateElement(data);\r\n      return;\r\n    }\r\n\r\n    if (updateType === UpdateType.MAJOR) {\r\n      this.#elementsModel.elements = [];\r\n    }\r\n\r\n    this.init();\r\n  };\r\n\r\n  #handleViewAction = (userAction, data) => {\r\n    switch (userAction) {\r\n      case UserAction.ADD_ELEMENT:\r\n        this.#elementsModel.addElement(UpdateType.MINOR, data);\r\n        break;\r\n      case UserAction.DELETE_ELEMENT:\r\n        this.#elementsModel.deleteElement(UpdateType.MINOR, data);\r\n        break;\r\n      case UserAction.UPDATE_ELEMENT:\r\n        this.#elementsModel.updateElement(UpdateType.PATCH, data);\r\n        break;\r\n    }\r\n  };\r\n}\r\n","import { GridType } from \"../const.js\";\r\nimport AbstractView from \"./abstract-view.js\";\r\n\r\nconst gridToIconMap = {\r\n  [GridType.LANDING]: `<svg class=\"grid-select__img\" width=\"240\" height=\"132\" viewBox=\"0 0 240 132\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <rect x=\"0.3\" y=\"0.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"116.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"26.3\" width=\"239.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n    </svg>`,\r\n  [GridType.BLOG]: `<svg class=\"grid-select__img\" width=\"240\" height=\"132\" viewBox=\"0 0 240 132\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <rect x=\"0.3\" y=\"0.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"116.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"26.394\" width=\"89.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"100.3\" y=\"26.3\" width=\"139.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n    </svg>`,\r\n  [GridType.SHOP]: `<svg class=\"grid-select__img\" width=\"240\" height=\"132\" viewBox=\"0 0 240 132\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <rect x=\"0.3\" y=\"0.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"116.3\" width=\"239.4\" height=\"15.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"0.3\" y=\"26.3\" width=\"73.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"83.3\" y=\"26.3\" width=\"73.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n      <rect x=\"166.3\" y=\"26.3\" width=\"73.4\" height=\"79.4\" stroke-width=\"0.6\" stroke-dasharray=\"5 5\"/>\r\n    </svg>`,\r\n};\r\n\r\nconst createGridSelectItemTemplate = (gridType, gridName, isChecked) => (`\r\n  <input class=\"grid-select__radio visually-hidden\" type=\"radio\" name=\"grid\" id=\"grid-${gridType}\" ${isChecked ? 'checked' : ''} data-grid-type=\"${gridType}\">\r\n  <label for=\"grid-${gridType}\" class=\"grid-select__btn\">\r\n    <span class=\"grid-select__text\">${gridName}</span>\r\n    ${gridToIconMap[gridType]}\r\n  </label>\r\n`);\r\n\r\nconst createGridSelectTemplate = (grids, currentGridType) => (`\r\n  <form class=\"grid-select\">\r\n    <h2 class=\"grid-select__header\">Выберите сетку сайта</h2>\r\n    ${grids.map((grid) => createGridSelectItemTemplate(grid.type, grid.name, grid.type === currentGridType)).join('\\n')}\r\n  </form>\r\n`);\r\n\r\nexport default class GridSelectView extends AbstractView {\r\n  #grids = null;\r\n  #currentGrid = null;\r\n\r\n  constructor(grids, currentGridType) {\r\n    super();\r\n    this.#grids = grids;\r\n    this.#currentGrid = currentGridType;\r\n  }\r\n\r\n  get template() {\r\n    return createGridSelectTemplate(this.#grids, this.#currentGrid);\r\n  }\r\n\r\n  setGridTypeChangeHandler = (callback) => {\r\n    this._callback.gridTypeChange = callback;\r\n\r\n    this.element.addEventListener('change', this.#gridTypeChangeHandler);\r\n  };\r\n\r\n  #gridTypeChangeHandler = (evt) => {\r\n    const gridType = evt.target.dataset.gridType;\r\n\r\n    this._callback.gridTypeChange(gridType);\r\n  };\r\n}\r\n","export default class AbstractModel {\r\n  #observers = new Set();\r\n\r\n  constructor() {\r\n    if (new.target === AbstractModel) {\r\n      throw new Error('Can\\'t instantiate AbstractModel');\r\n    }\r\n  }\r\n\r\n  addObserver(observer) {\r\n    this.#observers.add(observer);\r\n  }\r\n\r\n  removeObserver(observer) {\r\n    this.#observers.delete(observer);\r\n  }\r\n\r\n  _notify(updateType, data) {\r\n    this.#observers.forEach(observer => observer(updateType, data));\r\n  }\r\n}\r\n","import LayoutPresenter from \"./presenter/layout-presenter.js\";\r\nimport GridSelectPresenter from \"./presenter/grid-select-presenter.js\";\r\nimport GridModel from \"./model/grid-model.js\";\r\nimport ElementsModel from \"./model/elements-model.js\";\r\nimport { GridType, UpdateType } from \"./const.js\";\r\n\r\nconst gridModel = new GridModel();\r\ngridModel.setGrid(UpdateType.MINOR, GridType.LANDING);\r\n\r\nconst elementsModel = new ElementsModel();\r\n\r\nconst containerElement = document.querySelector('.container');\r\nconst gridSelectPresenter = new GridSelectPresenter(containerElement, gridModel, elementsModel);\r\nconst layoutPresenter = new LayoutPresenter(containerElement, gridModel, elementsModel);\r\n\r\ngridSelectPresenter.init();\r\nlayoutPresenter.init();\r\n","import AbstractModel from \"./abstract-model.js\";\r\n\r\nexport default class GridModel extends AbstractModel {\r\n  #grid = null;\r\n\r\n  get grid() {\r\n    return this.#grid;\r\n  }\r\n\r\n  setGrid(updateType, gridType) {\r\n    this.#grid = gridType;\r\n\r\n    this._notify(updateType, gridType);\r\n  }\r\n}\r\n","import { getRandomId } from \"../utils/common.js\";\r\nimport AbstractModel from \"./abstract-model.js\";\r\n\r\nexport default class ElementsModel extends AbstractModel {\r\n  #elements = [];\r\n\r\n  get elements() {\r\n    return this.#elements;\r\n  }\r\n\r\n  set elements(elements) {\r\n    this.#elements = [...elements];\r\n  }\r\n\r\n  addElement(updateType, data) {\r\n    const newElement = { id: getRandomId(), ...data };\r\n\r\n    this.#elements.push(newElement);\r\n    this._notify(updateType, newElement);\r\n  }\r\n\r\n  deleteElement(updateType, data) {\r\n    const index = this.#elements.findIndex((element) => element.id === +data.id);\r\n    this.#elements = [...this.#elements.slice(0, index), ...this.#elements.slice(index + 1)];\r\n\r\n    this._notify(updateType, data);\r\n  }\r\n\r\n  updateElement(updateType, data) {\r\n    const element = this.#elements.find((element) => element.id === +data.id);\r\n    element.content = data.content;\r\n\r\n    this._notify(updateType, element);\r\n  }\r\n}\r\n","export const getRandomId = () => Math.trunc(Math.random() * 1000);\r\n","import GridSelectView from \"../view/grid-select-view.js\";\r\nimport { GridType, RenderPosition, UpdateType } from \"../const.js\";\r\nimport { remove, render } from \"../utils/render.js\";\r\n\r\nexport default class GridSelectPresenter {\r\n  #gridSelectContainer = null;\r\n  #gridModel = null;\r\n\r\n  #gridSelectComponent = null;\r\n\r\n  constructor(gridSelectContainer, gridModel) {\r\n    this.#gridSelectContainer = gridSelectContainer;\r\n    this.#gridModel = gridModel;\r\n  }\r\n\r\n  get grids() {\r\n    return [\r\n      {\r\n        type: GridType.LANDING,\r\n        name: 'Лендинг',\r\n      },\r\n      {\r\n        type: GridType.BLOG,\r\n        name: 'Блог',\r\n      },\r\n      {\r\n        type: GridType.SHOP,\r\n        name: 'Магазин',\r\n      }\r\n    ];\r\n  }\r\n\r\n  init() {\r\n    const prevGridSelectComponent = this.#gridSelectComponent;\r\n    this.#gridSelectComponent = new GridSelectView(this.grids, this.#gridModel.grid);\r\n\r\n    if (prevGridSelectComponent !== null) {\r\n      remove(prevGridSelectComponent);\r\n    }\r\n\r\n    this.#render();\r\n\r\n    this.#gridSelectComponent.setGridTypeChangeHandler(this.#handleGridTypeChange);\r\n    this.#gridModel.addObserver(this.#handleModelEvent);\r\n  }\r\n\r\n  #render = () => {\r\n    render(this.#gridSelectContainer, this.#gridSelectComponent, RenderPosition.BEFOREEND);\r\n  };\r\n\r\n  #handleGridTypeChange = (gridType) => {\r\n    this.#gridModel.setGrid(UpdateType.MAJOR, gridType);\r\n  };\r\n\r\n  #handleModelEvent = () => {\r\n    this.init();\r\n  };\r\n}\r\n"],"names":["RenderPosition","GridType","SectionType","TagName","UserAction","UpdateType","render","container","element","position","parentElement","AbstractView","childElement","before","prepend","append","after","remove","component","removeElement","_callback","constructor","Error","this","template","newElement","document","createElement","innerHTML","firstElementChild","LayoutView","grid","super","SectionView","sectionType","sectionNumber","hasContent","sectionNumberClassName","sectionEmptyClassName","sectionPlaceholder","toUpperCase","slice","createSectionTemplate","toggleChooseElementPanel","querySelector","classList","toggle","setAddElementClickHandler","callback","addElementClick","addEventListener","setChooseElementPanelClickHandler","chooseElementPanelClick","evt","preventDefault","target","dataset","elemType","tagNameToPlaceholder","ElementView","id","tagName","content","elementClassName","getElementClassName","contentTemplate","createImageContentTemplate","createTextContentTemplate","createElementTemplate","setDeleteElementClickHandler","deleteElementClick","setChangeTextElementHandler","changeTextElement","setAddImageClickHandler","addImageClick","setImageUploadClickHandler","imageUploadClick","showImageUploadPopup","add","hideImageUploadPopup","key","textContent","value","ElementPresenter","elementContainer","changeData","init","prevElementComponent","oldComponent","newComponent","replaceWith","contains","removeEventListener","SectionPresenter","Map","sectionContainer","section","elements","type","number","length","updateElement","get","forEach","elementPresenter","set","sectionId","gridTypeToColumnMap","gridToIconMap","GridSelectView","grids","currentGridType","map","createGridSelectItemTemplate","gridType","gridName","name","join","setGridTypeChangeHandler","gridTypeChange","AbstractModel","Set","addObserver","observer","removeObserver","delete","_notify","updateType","data","gridModel","setGrid","elementsModel","addElement","Math","trunc","random","push","deleteElement","index","findIndex","find","containerElement","gridSelectPresenter","gridSelectContainer","prevGridSelectComponent","layoutPresenter","layoutContainer","sections","i","prevLayoutComponent","sectionPresenter","sectionElements","filter","userAction"],"sourceRoot":""}